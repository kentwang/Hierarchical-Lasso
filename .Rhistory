x1
head(data)
Y = rnorm(n)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
head(X)
p
n = 100
p = 3
# generate random categorical vars with 100 obs
# x1 = sample(c(1, 2, 3, 4, 5), n, replace = T)
# x2 = sample(c(1, 2, 3), n, replace = T)
# x3 = sample(c(1, 2), n, replace = T)
# X = data.frame(cbind(intercept = rep(1, n), x1, x2, x3))
# X$x1 = as.factor(X$x1)
# X$x2 = as.factor(X$x2)
# X$x3 = as.factor(X$x3)
# simulation from glinternet package
# continuous response, categorical variables
Y = rnorm(n)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
data = data.frame(cbind(Y, X))
head(data)
names(data) = c("y", "x1", "x2", "x3")
head(data)
attach(data)
x1
dummy(data$x1)
X_dummy = cbind(intercept = rep(1, n), dummy(data$x1), dummy(data$x2), dummy(data$x3))
names(X_dummy)
X_dummy
rep(1, n)
head(X_dummy)
X_dummy = cbind(rep(1, n), dummy(data$x1), dummy(data$x2), dummy(data$x3))
head(X_dummy
)
head(cbind(dummy(data$x1), dummy(data$x2)))
names(dummy(data$x1))
data.frame(dummy(data$x1))
?dummy
names(dummy.data.frame(data$x1))
data_frame(dummy(data$x1))
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(dplyr)
data_frame(dummy(data$x1))
install.packages("lazyeval")
library(dplyr)
data_frame(dummy(data$x1))
data_frame(data$x1)
?data_frame
head(dummy(data$x1))
head(dummy(data$x1, sep="."))
dummy(data$x1)
as.data.frame(dummy(data$x1))
head(dummy(data$x1))
dim(dummy(data$x3))
X_dummy = data.frame(cbind(rep(1, n), dummy(data$x1), dummy(data$x2), dummy(data$x3)))
names(X_dummy)
Y = rnorm(n)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
data = data.frame(cbind(Y, X))
names(data) = c("y", "x1", "x2", "x3")
attach(data)
X_dummy = data.frame(cbind(rep(1, n), dummy(data$x1), dummy(data$x2), dummy(data$x3)))
Y = rnorm(n)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
data = data.frame(cbind(Y, X))
names(data) = c("y", "x1", "x2", "x3")
X_dummy = data.frame(cbind(rep(1, n), dummy(data$x1), dummy(data$x2), dummy(data$x3)))
names(X_dummy)
paste("x1", 1:p)
paste("x1", 1:p, sep = "")
paste("x1", 0:(p-1), sep = "")
rep(paste("x1", 0:(p-1), sep = ""), 3)
x3 = data$x3
x1 = data$x1
x2 = data$x2
x3 = data$x3
dummy(x1)
X_dummy = data.frame(cbind(rep(1, n), dummy(x1), dummy(x2), dummy(x3)))
head(X_dummy)
size(X_dummy)
dim(X_dummy)
rep(1, n)
X_dummy = data.frame(intercept = rep(1, n), dummy(x1), dummy(x2), dummy(x3)))
head(dummy(x1))
x1_d = data.frame(dummy(x1)); names(x1_d) = paste("x1", 0:(p-1), sep = "")
x1_d
head(x1)
head(x1_d_
)
head(x1_d)
x1_d = data.frame(dummy(x1)); names(x1_d) = paste("x1", 0:(p-1), sep = "")
x2_d = data.frame(dummy(x1)); names(x2_d) = paste("x2", 0:(p-1), sep = "")
x3_d = data.frame(dummy(x1)); names(x3_d) = paste("x3", 0:(p-1), sep = "")
head(cbind(x1_d, x2_d))
intercept = rep(1, n)
temp = rep(NA, 3)
temp
temp = cbind(temp, rep(1, 3))
temp
temp = NULL
temp = cbind(temp, rep(1, 3))
temp
df1 = x1_d
df2 = x2_d
df2
names(df1)
temp = NULL
for(i in 1:ncol(f1)) {
for(j in 1:ncol(f2)) {
temp = cbind(temp, df1[, i] * df2[, j])
}
}
temp = NULL
for(i in 1:ncol(df1)) {
for(j in 1:ncol(df2)) {
temp = cbind(temp, df1[, i] * df2[, j])
}
}
temp
data.frame("hello" = 1)
temp = NULL
for(i in 1:ncol(df1)) {
for(j in 1:ncol(df2)) {
temp = cbind(temp, data.frame(paste(names(df1)[i], names(df2)[j], sep = ".")
= df1[, i] * df2[, j]))
}
}
temp
data.frame(paste(names(df1)[i], names(df2)[j], sep = ".")
= df1[, i] * df2[, j])
paste(names(df1)[i], names(df2)[j], sep = ".")
i
j
temp = NULL
for(i in 1:ncol(df1)) {
for(j in 1:ncol(df2)) {
temp = cbind(temp, data.frame(paste(names(df1)[i], names(df2)[j], sep = ".")=df1[, i] * df2[, j]))
}
}
i
j
df1[, i] * df2[, j])
df1[, i] * df2[, j]
paste(names(df1)[i], names(df2)[j], sep = ".")
data.frame(paste(names(df1)[i], names(df2)[j], sep = ".")=df1[, i] * df2[, j])
thisName = paste(names(df1)[i], names(df2)[j], sep = ".")
temp = cbind(temp, data.frame(thisName = df1[, i] * df2[, j]))
data.frame("hello" = rep(0, 3))
temp = cbind(temp, data.frame("hello" = df1[, i] * df2[, j]))
temp
data.frame()
temp = data.frame()
for(i in 1:ncol(df1)) {
for(j in 1:ncol(df2)) {
thisName = paste(names(df1)[i], names(df2)[j], sep = ".")
temp = cbind(temp, data.frame("hello" = df1[, i] * df2[, j]))
}
}
temp = data.frame()
for(i in 1:ncol(df1)) {
for(j in 1:ncol(df2)) {
thisName = paste(names(df1)[i], names(df2)[j], sep = ".")
temp = cbind(temp, df1[, i] * df2[, j])
}
}
length(df1[, i] * df2[, j])
cbind(temp, df1[, i] * df2[, j])
paste(names(df1), names(df2))
temp = NULL
for(i in 1:ncol(df1)) {
for(j in 1:ncol(df2)) {
thisName = paste(names(df1)[i], names(df2)[j], sep = ".")
temp = cbind(temp, df1[, i] * df2[, j])
}
}
paste(names(df1), names(df2))
temp
temp = data.frame(temp)
head(temp)
temp = NULL
temp.names = NULL
for(i in 1:ncol(df1)) {
for(j in 1:ncol(df2)) {
temp = cbind(temp, df1[, i] * df2[, j])
temp.names = c(temp.names, paste(names(df1)[i], names(df2)[j], sep = "."))
}
}
temp = data.frame(temp)
names(temp) = temp.names
head(temp)
source('C:/Users/kwang18/Dropbox/2015 Spring/ST 697/simulation/ergm/functions.R', echo=TRUE)
x12_d = interaction_dummy(x1_d, x2_d)
x13_d = interaction_dummy(x1_d, x3_d)
x23_d = interaction_dummy(x2_d, x3_d)
head(x23)
head(x23_d)
X_d = cbind(intercept, x1_d, x2_d, x3_d, x12_d, x13_d, x23_d)
head(X_d)
dim(X_d)
Beta = c(beta0, beta1, beta2, beta3, beta12)
length(beta12)
## strong hierrchy model-I x1 x2 x3 x1x2
beta0 = rnorm(1)
beta1 = rnorm(levels(data$x1)-1); beta1 = c(-beta1, beta1)
beta2 = rnorm(levels(data$x2)-1); beta1 = c(-beta2, beta2)
beta3 = rnorm(levels(data$x3)-1); beta1 = c(-beta3, beta3)
beta12 = rnorm(levels(data$x1) * levels(data$x2) - 1); beta12 = c(-beta12, beta12)
length(beta12)
levels(data$x1) * levels(data$x2)
levels(x1)
seed(20150305)
Y = rnorm(n)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
data = data.frame(cbind(Y, X))
names(data) = c("y", "x1", "x2", "x3")
set.seed(20150305)
Y = rnorm(n)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
data = data.frame(cbind(Y, X))
names(data) = c("y", "x1", "x2", "x3")
x1 = as.factor(data$x1)
x2 = as.factor(data$x2)
x3 = as.factor(data$x3)
intercept = rep(1, n)
x1_d = data.frame(dummy(x1)); names(x1_d) = paste("x1", 0:(p-1), sep = "")
x2_d = data.frame(dummy(x1)); names(x2_d) = paste("x2", 0:(p-1), sep = "")
x3_d = data.frame(dummy(x1)); names(x3_d) = paste("x3", 0:(p-1), sep = "")
x12_d = interaction_dummy(x1_d, x2_d)
x13_d = interaction_dummy(x1_d, x3_d)
x23_d = interaction_dummy(x2_d, x3_d)
X_d = cbind(intercept, x1_d, x2_d, x3_d, x12_d, x13_d, x23_d)
head(X_d)
levels(x1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-beta1, beta1)
length(beta1)
length(levels(x1))
beta0 = rnorm(1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-beta1, beta1)
beta
beta1`
;
''
''
beta1
length(levels(x1))-1
rnorm(length(levels(x1))-1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-beta1, sum(beta1))
beta1
beta0 = rnorm(1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-sum(beta1), beta1)
beta2 = rnorm(length(levels(x2))-1); beta2 = c(-sum(beta2), beta2)
beta3 = rnorm(length(levels(x3))-1); beta3 = c(-sum(beta3), beta3)
beta12 = rnorm(length(levels(x1)) * length(levels(x2)) - 1); beta12 = c(-sum(beta12), beta12)
length(beta12)
set.seed(20150305)
Y = rnorm(n)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
data = data.frame(cbind(Y, X))
names(data) = c("y", "x1", "x2", "x3")
x1 = as.factor(data$x1)
x2 = as.factor(data$x2)
x3 = as.factor(data$x3)
# dummies
intercept = rep(1, n)
x1_d = data.frame(dummy(x1)); names(x1_d) = paste("x1", 0:(p-1), sep = "")
x2_d = data.frame(dummy(x1)); names(x2_d) = paste("x2", 0:(p-1), sep = "")
x3_d = data.frame(dummy(x1)); names(x3_d) = paste("x3", 0:(p-1), sep = "")
x12_d = interaction_dummy(x1_d, x2_d)
x13_d = interaction_dummy(x1_d, x3_d)
x23_d = interaction_dummy(x2_d, x3_d)
X_d = cbind(intercept, x1_d, x2_d, x3_d, x12_d, x13_d, x23_d)
# fit = glinternet(X, Y, numLevels)
# hierarchical truth \Theta_jk != 0 => \beta_j != 0 and \beta_k != 0
# draw both the coefficients and error from N(0, 1).
# coefficient convention: b0, b1, b2, b3, b12, b13, b23
## strong hierrchy model-I x1 x2 x3 x1x2
beta0 = rnorm(1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-sum(beta1), beta1)
beta2 = rnorm(length(levels(x2))-1); beta2 = c(-sum(beta2), beta2)
beta3 = rnorm(length(levels(x3))-1); beta3 = c(-sum(beta3), beta3)
beta12 = rnorm(length(levels(x1)) * length(levels(x2)) - 1); beta12 = c(-sum(beta12), beta12)
beta13 = rnorm(length(levels(x1)) * length(levels(x3)) - 1); beta13 = c(-sum(beta13), beta13)
beta23 = rnorm(length(levels(x2)) * length(levels(x3)) - 1); beta23 = c(-sum(beta23), beta23)
Beta = c(beta0, beta1, beta2, beta3, beta12)
Beta
length(Beta)
set.seed(20150305)
Y = rnorm(n)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
data = data.frame(cbind(Y, X))
names(data) = c("y", "x1", "x2", "x3")
x1 = as.factor(data$x1)
x2 = as.factor(data$x2)
x3 = as.factor(data$x3)
# dummies
intercept = rep(1, n)
x1_d = data.frame(dummy(x1)); names(x1_d) = paste("x1", 0:(p-1), sep = "")
x2_d = data.frame(dummy(x1)); names(x2_d) = paste("x2", 0:(p-1), sep = "")
x3_d = data.frame(dummy(x1)); names(x3_d) = paste("x3", 0:(p-1), sep = "")
x12_d = interaction_dummy(x1_d, x2_d)
x13_d = interaction_dummy(x1_d, x3_d)
x23_d = interaction_dummy(x2_d, x3_d)
X_d = cbind(intercept, x1_d, x2_d, x3_d, x12_d, x13_d, x23_d)
# fit = glinternet(X, Y, numLevels)
# hierarchical truth \Theta_jk != 0 => \beta_j != 0 and \beta_k != 0
# draw both the coefficients and error from N(0, 1).
# coefficient convention: b0, b1, b2, b3, b12, b13, b23
## strong hierrchy model-I x1 x2 x3 x1x2. Simulation of coefficients
beta0 = rnorm(1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-sum(beta1), beta1)
beta2 = rnorm(length(levels(x2))-1); beta2 = c(-sum(beta2), beta2)
beta3 = rnorm(length(levels(x3))-1); beta3 = c(-sum(beta3), beta3)
beta12 = rnorm(length(levels(x1)) * length(levels(x2)) - 1); beta12 = c(-sum(beta12), beta12)
beta13 = rep(0, length(levels(x1)) * length(levels(x3)))
beta23 = rep(0, length(levels(x2)) * length(levels(x3)))
Beta = c(beta0, beta1, beta2, beta3, beta12, beta13, beta23)
Beta
dim(X_d)
length(Beta)
X*beta
X*Beta
Beta = as.vector(c(beta0, beta1, beta2, beta3, beta12, beta13, beta23))
Beta
Beta = t(c(beta0, beta1, beta2, beta3, beta12, beta13, beta23))
Beta
Beta = t(t(c(beta0, beta1, beta2, beta3, beta12, beta13, beta23)))
Beta
X*Beta
dim(X)
dim(Beta)
X_d*Beta
dim(X)
dim(X_d)
dim(Beta)
X_d * Beta
X_d %*% Beta
as.matrix(X_d) %*% Beta
library(glinternet)
library(hierNet)
library(grplasso) # package by Meier
library(dplyr)
n = 100
p = 3
# generate random categorical vars with 100 obs
# x1 = sample(c(1, 2, 3, 4, 5), n, replace = T)
# x2 = sample(c(1, 2, 3), n, replace = T)
# x3 = sample(c(1, 2), n, replace = T)
# X = data.frame(cbind(intercept = rep(1, n), x1, x2, x3))
# X$x1 = as.factor(X$x1)
# X$x2 = as.factor(X$x2)
# X$x3 = as.factor(X$x3)
# simulation from glinternet package
# continuous response, categorical variables
set.seed(20150305)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
x1 = as.factor(X[, 1])
x2 = as.factor(X[, 2])
x3 = as.factor(X[, 3])
# dummies
intercept = rep(1, n)
x1_d = data.frame(dummy(x1)); names(x1_d) = paste("x1", 0:(p-1), sep = "")
x2_d = data.frame(dummy(x1)); names(x2_d) = paste("x2", 0:(p-1), sep = "")
x3_d = data.frame(dummy(x1)); names(x3_d) = paste("x3", 0:(p-1), sep = "")
x12_d = interaction_dummy(x1_d, x2_d)
x13_d = interaction_dummy(x1_d, x3_d)
x23_d = interaction_dummy(x2_d, x3_d)
X_d = cbind(intercept, x1_d, x2_d, x3_d, x12_d, x13_d, x23_d)
# fit = glinternet(X, Y, numLevels)
# hierarchical truth \Theta_jk != 0 => \beta_j != 0 and \beta_k != 0
# draw both the coefficients and error from N(0, 1).
# coefficient convention: b0, b1, b2, b3, b12, b13, b23
## strong hierrchy model-I x1 x2 x3 x1x2. Simulation of coefficients
beta0 = rnorm(1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-sum(beta1), beta1)
beta2 = rnorm(length(levels(x2))-1); beta2 = c(-sum(beta2), beta2)
beta3 = rnorm(length(levels(x3))-1); beta3 = c(-sum(beta3), beta3)
beta12 = rnorm(length(levels(x1)) * length(levels(x2)) - 1); beta12 = c(-sum(beta12), beta12)
beta13 = rep(0, length(levels(x1)) * length(levels(x3)))
beta23 = rep(0, length(levels(x2)) * length(levels(x3)))
Beta = t(t(c(beta0, beta1, beta2, beta3, beta12, beta13, beta23)))
y = as.matrix(X_d) * Beta + rnorm(100)
as.matrix(X_d) * Beta
dim(X_d)
dim(Beta)
y = as.matrix(X_d) %*% Beta + rnorm(100)
y
sd(as.matrix(X_d) %*% Beta)
y = as.matrix(X_d) %*% Beta + rnorm(100, 0, 0.5)
y
y_true = as.matrix(X_d) %*% Beta
y_sim = y_true + rnorm(100, 0, 0.5)
plot(y_true, y_sim)
plot(y_true, y_sim)
lm(y ~ x1 + x2 + x3 + x1*x2)
fit = lm(y ~ x1 + x2 + x3 + x1*x2)
summary(fit)
fit = lm(y ~ x1 + x2 + x3 + x1 * x2 + x1 * x3 + x2 * x3)
fit.lm = lm(y ~ x1 + x2 + x3 + x1 * x2 + x1 * x3 + x2 * x3)
summary(fit.lm)
var_signal = length(c(beta1, beta2, beta3, beta12)) # all standard normal coefficients
var_signam
var_signal
n = 100
p = 3
# generate random categorical vars with 100 obs
# x1 = sample(c(1, 2, 3, 4, 5), n, replace = T)
# x2 = sample(c(1, 2, 3), n, replace = T)
# x3 = sample(c(1, 2), n, replace = T)
# X = data.frame(cbind(intercept = rep(1, n), x1, x2, x3))
# X$x1 = as.factor(X$x1)
# X$x2 = as.factor(X$x2)
# X$x3 = as.factor(X$x3)
# simulation from glinternet package
# continuous response, categorical variables
set.seed(20150305)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
x1 = as.factor(X[, 1])
x2 = as.factor(X[, 2])
x3 = as.factor(X[, 3])
# dummies
intercept = rep(1, n)
x1_d = data.frame(dummy(x1)); names(x1_d) = paste("x1", 0:(p-1), sep = "")
x2_d = data.frame(dummy(x1)); names(x2_d) = paste("x2", 0:(p-1), sep = "")
x3_d = data.frame(dummy(x1)); names(x3_d) = paste("x3", 0:(p-1), sep = "")
x12_d = interaction_dummy(x1_d, x2_d)
x13_d = interaction_dummy(x1_d, x3_d)
x23_d = interaction_dummy(x2_d, x3_d)
X_d = cbind(intercept, x1_d, x2_d, x3_d, x12_d, x13_d, x23_d)
# fit = glinternet(X, Y, numLevels)
# hierarchical truth \Theta_jk != 0 => \beta_j != 0 and \beta_k != 0
# draw both the coefficients and error from N(0, 1).
# coefficient convention: b0, b1, b2, b3, b12, b13, b23
## strong hierrchy model-I x1 x2 x3 x1x2. Simulation of coefficients
beta0 = rnorm(1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-sum(beta1), beta1)
beta2 = rnorm(length(levels(x2))-1); beta2 = c(-sum(beta2), beta2)
beta3 = rnorm(length(levels(x3))-1); beta3 = c(-sum(beta3), beta3)
beta12 = rnorm(length(levels(x1)) * length(levels(x2)) - 1); beta12 = c(-sum(beta12), beta12)
beta13 = rep(0, length(levels(x1)) * length(levels(x3)))
beta23 = rep(0, length(levels(x2)) * length(levels(x3)))
Beta = t(t(c(beta0, beta1, beta2, beta3, beta12, beta13, beta23)))
# simulation of response with some stn ratio
# Note: given X, the signal variability of a categirical variable is due to one of its levels
var_signal = 4 # intercept is constant
y_true = as.matrix(X_d) %*% Beta
y_sim = y_true + rnorm(100, 0, 2)
fit.lm = lm(y ~ x1 + x2 + x3 + x1 * x2 + x1 * x3 + x2 * x3)
summary(fit.lm)
cbind(y_true, y_sim)
Beta
n = 100
p = 3
# generate random categorical vars with 100 obs
# x1 = sample(c(1, 2, 3, 4, 5), n, replace = T)
# x2 = sample(c(1, 2, 3), n, replace = T)
# x3 = sample(c(1, 2), n, replace = T)
# X = data.frame(cbind(intercept = rep(1, n), x1, x2, x3))
# X$x1 = as.factor(X$x1)
# X$x2 = as.factor(X$x2)
# X$x3 = as.factor(X$x3)
# simulation from glinternet package
# continuous response, categorical variables
set.seed(20150305)
X = matrix(sample(0:2, 100*p, replace=TRUE), nrow=100) # design matrix
numLevels = rep(3, p)
x1 = as.factor(X[, 1])
x2 = as.factor(X[, 2])
x3 = as.factor(X[, 3])
# dummies
intercept = rep(1, n)
x1_d = data.frame(dummy(x1)); names(x1_d) = paste("x1", 0:(p-1), sep = "")
x2_d = data.frame(dummy(x1)); names(x2_d) = paste("x2", 0:(p-1), sep = "")
x3_d = data.frame(dummy(x1)); names(x3_d) = paste("x3", 0:(p-1), sep = "")
x12_d = interaction_dummy(x1_d, x2_d)
x13_d = interaction_dummy(x1_d, x3_d)
x23_d = interaction_dummy(x2_d, x3_d)
X_d = cbind(intercept, x1_d, x2_d, x3_d, x12_d, x13_d, x23_d)
# fit = glinternet(X, Y, numLevels)
# hierarchical truth \Theta_jk != 0 => \beta_j != 0 and \beta_k != 0
# draw both the coefficients and error from N(0, 1).
# coefficient convention: b0, b1, b2, b3, b12, b13, b23
## strong hierrchy model-I x1 x2 x3 x1x2. Simulation of coefficients
beta0 = rnorm(1)
beta1 = rnorm(length(levels(x1))-1); beta1 = c(-sum(beta1), beta1)
beta2 = rnorm(length(levels(x2))-1); beta2 = c(-sum(beta2), beta2)
beta3 = rnorm(length(levels(x3))-1); beta3 = c(-sum(beta3), beta3)
beta12 = rnorm(length(levels(x1)) * length(levels(x2)) - 1); beta12 = c(-sum(beta12), beta12)
beta13 = rep(0, length(levels(x1)) * length(levels(x3)))
beta23 = rep(0, length(levels(x2)) * length(levels(x3)))
Beta = t(t(c(beta0, beta1, beta2, beta3, beta12, beta13, beta23)))
# simulation of response with some stn ratio
# Note: given X, the signal variability of a categirical variable is due to one of its levels
var_signal = 4 # intercept is constant
y_true = as.matrix(X_d) %*% Beta
y_sim = y_true + rnorm(100, 0, 0.5)
cbind(y_true, y_sim)
fit.lm = lm(y ~ x1 + x2 + x3 + x1 * x2 + x1 * x3 + x2 * x3)
summary(fit.lm)
getwd()

{
    "contents" : "library(dplyr)\nset.seed(20150413)\n\nn.sim = 1000\nx1 = rnorm(n.sim)\nx2 = rnorm(n.sim)\nx3 = rnorm(n.sim)\nmu = exp(0.1 + 0.2 * x1 + 0.5 * x2 + 0.1 * x1 * x2 + 0.01 * rnorm(n.sim))\ny.sim = rpois(n.sim, mu)\nbarplot(table(y.sim))\n\n# fit the simple poison regression\ndf = data.frame(y.sim = y.sim, x1 = x1, x2 = x2, x3 = x3)\nfit = glm(y.sim ~ x1 + x2 + x1* x2 + x3, data = df, family = \"poisson\")\nsummary(fit)\n\n\n## simulation with categorical interactions\n\nset.seed(20150413)\npCat = 3\nx1 = factor(sample(1:3, replace = TRUE, size = n.sim))\nx2 = factor(sample(1:3, replace = TRUE, size = n.sim))\nx3 = factor(sample(1:3, replace = TRUE, size = n.sim))\nnumLevels = c(length(levels(x1)), length(levels(x2)), length(levels(x3)))\n\nX_raw = data.frame(x1 = x1, x2 = x2, x3 = x3)\n\nX = as.data.frame(model.matrix(~ x1 + x2 + x3 + x1 * x2 + x1 * x3 + x2 * x3))\n\n## logistic. works just fine  \"binomial\"\n# mu = -5 + 3*X$x12 + 2*X$x13 + 3*X$x22 + 2*X$x23 + X$x12 * X$x22 + 1.5 * \n#            X$x12 * X$x23 + 2 * X$x13 * X$x22 + 2.5 * X$x13 * X$x23 + 0.001*rnorm(n.sim)\n# pi <- exp(mu) / (1 + exp(mu))\n# y.sim <- rbinom(n=n.sim, size=1, prob=pi)\n\n## Poisson. Looks like its fine as well \"Poisson\" but intercept should be negative\nmu = exp(-5 + 3*X$x12 + 2*X$x13 + 3*X$x22 + 2*X$x23 + X$x12 * X$x22 + 1.5 * \n  X$x12 * X$x23 + 2 * X$x13 * X$x22 + 2.5 * X$x13 * X$x23 + 0.001*rnorm(n.sim)) # noise ratio is too big\ny.sim = rpois(n.sim, mu)\n# barplot(table(y.sim))\n\n\n# Normal works just fine \"gaussian\"\n# y.sim =  -5 + 3*X$x12 + 2*X$x13 + 3*X$x22 + 2*X$x23 + X$x12 * X$x22 + 1.5 * \n#   X$x12 * X$x23 + 2 * X$x13 * X$x22 + 2.5 * X$x13 * X$x23 + 0.001*rnorm(n.sim)\n\n# full model  paste(colnames(X)[-1], collapse = \" + \")\nfmla.full = formula(y.sim ~ x12 + x13 + x22 + x23 + x32 + x33 + \n                      x12:x22 + x13:x22 + x12:x23 + x13:x23 + \n                      x12:x32 + x13:x32 + x12:x33 + x13:x33 + \n                      x22:x32 + x23:x32 + x22:x33 + x23:x33)\n# ground true\nfmla.0 = formula(y.sim ~ x12 + x13 + x22 + x23 + x12:x22 + x13:x22 + x12:x23 + x13:x23)\n\nfmla.1 = formula(y.sim ~ x12 + x13 + x22 + x23 + x32 + x33 + \n                   x12:x22 + x13:x22 + x12:x23 + x13:x23 + \n                   x12:x32 + x13:x32 + x12:x33 + x13:x33)\n\n\n# define data frame\ndf = cbind(y.sim, X)\ndf.raw = cbind(y.sim, X_raw)\n\n# df1 = cbind(y.sim, X)\n# fit1 = glm(fmla1, data = df1, family = \"poisson\")\n# summary(fit1)\n\n\n## fit different models using glm\nfit.full = glm(fmla.full, data = df, family = \"poisson\")\nsummary(fit.full)\n\nfit.0 = glm(fmla.0, data = df, family = \"poisson\")\nsummary(fit.0)\n\nfit.1 = glm(fmla.1, data = df, family = \"poisson\")\nsummary(fit.1)\n\n\n## fit models using gglasso\ngroup.0 = c(1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6)\n#group.0 = NULL\n# select best lambda using CV\nfit.cv.gglasso.0 = cv.gglasso(as.matrix(X[, -1]), y.sim, group = group.0)\nplot(gglasso(as.matrix(X[, -1]), y.sim, group = group.0))\nabline(abline(v = log(fit.cv.gglasso.0$lambda.min)))\n# \nfit.gglasso.0 = gglasso(as.matrix(X[, -1]), y.sim, group = group.0, lambda = fit.cv.gglasso.0$lambda.min)\ncoef(fit.gglasso.0)\n",
    "created" : 1428978173933.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2127668605",
    "id" : "D9D5B689",
    "lastKnownWriteTime" : 1429201991,
    "path" : "~/Hierarchical-Lasso/poisson_sim.R",
    "project_path" : "poisson_sim.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}